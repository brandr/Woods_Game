Woods game todolist

Level editor
--------------------

Either get rid of tileset select tab inside level tab or make it work

Tiled Images
	*out of room on tileset tab-- need to reorganize it (tabs?)

Fix memory leaks in level editor
	* why does it happen when selecting objects?
	* adding and deleting objects seems to cause a spike in memory, try looking into this to see where we reserve more memory
		# we probably reserve it in the update method (in level grid) after deletion, not the deletion itself
	* might be caused by the tilesets, or by the ALLEGRO_BITMAP pointers
	* this is also a good time to fix memory leaks in general

---------------------------------------------------

Allow sleeping in bed (maybe only in certain times?) to go to next day and save, allow using calendar to load
	* How to save?
	* Sleep animation? (Screen going dark, player lying in bed)
	* advance day

Look up actual date for specific year (whenever story took place, probably early 90s or late 80s), maybe use standard date methods to determine real timestamps

Day/night cycle
	- might want to use different filtering techniques depending on indoors/outdoors, in shaded/non shaded areas, etc.
		* how to handle areas with lighting?
	- how to show date in addition to time? When to increment date? (Midnight or only after sleeping)
	- should player pass out if they're up too late?
	- might want to calculate "time to wake up" somehow rather than just making it constant
		* alarm clock upgrade/item?

Make NPC
	- need animations (mostly walking)
	- Dialog with avatar image
	- Have NPC turn to face player when talking and/or turn to face player under some circumstances

IDEA: Make NPC dialog similar to stardew valley where NPCs will randomly choose something to say based on the conditions
	- implement this as a set of "npc dialogs" tied to a set of "npc dialog conditions" attached to boolean methods through reflection
	- for instance, have a character choose from a set of 3 options when it's raining, 2 other options when the player is holding a certain tool, etc
	- allow these conditions to be "anded" together and give them ordinals so calculation is either
		* might be able to do something with | and flags corresponding to the orders
	- weight some options to be more likely than others using integer values
	- when the player talks to an npc, determine all dialog options that are appropriate and randomly choose one

IDEA: Make NPCs walk around outside programatically and have varying habits throughout the day.
	- for instance, they should usually stay close to trails
	- need to figure out how to process NPC movements when they're not on the same Level as the player
		* maybe get less fine-grain and just process what level they're in at any given time based on time of day,
			what they're doing, the weather, etc

Think carefully about updates for NPCs
	- there should definitely be a per-frame update, but could also have "update clocks" that go off every so often
	- also figure out how to have NPCs do things while the player is on another level, and what to do when they pass between levels
		* maybe they never pass between levels?
			# only need to avoid case where player follows them and sees they aren't there, or where they pop in suddenly

Cutscenes

Fix the way we pass xml attributes in the level editor (copy entire interact actions and contact actions instead of just method name and key)
	* look at spawners for an example since these seem to work correctly

Look into getting rid of "gameImages" list in Level
	* I think it's mainly used for drawing everything in order regardless of type (i.e, player/entitygroup)
		# Could probably make this put together a vector in memory without it being too expensive, and would prevent memory leaks

Implement "pickup-able" items, like seeds from ferns
	* Should probably be a % drop chance rolled on breaking plant so player can't savescum
	* probably need to make general "plant" behavior (growing, spreading, etc.) as part of this
	* Make sure these disappear properly from level-- do not store them in xml collections as there is no need
	
Buildings
	* need door animation? (no other blocks are animated, might need to be a new thing)
	* stairs? (good test of building mechanics, similar to going outside)
		# could also make stairs an entitygroup and use an optical illusion to make it look like you're walking "up" it
	* can use tiledImages and invisible blocks to make furniture, sink, etc
	* make roofs

Make sure I can do what I want with the tile system
	* Going through brush will be better if there's a tool to make trails but trails get overgrown
	* This means defining what the tile turns into when the tool is used on it
		# this could be a property of tile data set in the tileset, or a mapping stored elsewhere
		# the tool should also have some properties that come into play
	* also consider how it will work to dig holes
		# tiles need to define whether or not they can be dug, how deep they can be dug, and what happens when they're dug
		# should holes be saved when the game is saved?

IDEA: Stamina should drain slowly when walking and faster when running since time and stamina are both limited resources

IDEA: Stamina upgrades are the only thing you take with you when reloading

Add a shovel and allow the player to dig up items
	- implement picking up items off the ground first

Refactor all file loading to xml
	- player
		* consider long-term saving/loading functionality, like items the player has, start dungeon/level/position, etc

NOTES:

-consider adding plants as a class
	* LargePlants (i.e., trees) inherit from Plant and EntityGroup, SmallPlants (i.e. ferns) inherit from Plant and Block
	* this allows plants to have general behavior for growing, spreading, etc.
	* could also manage block/entity group behavior in other ways so as to avoid making to make new classes for every new set of behaviors

-think about how to set up world/dungeon/level serialization such that levels which update while the player isn't there are fully updated by the time the player gets to them
	* changes include things like plant growth, animals spawning, etc.
	* could generalize these things as some sort of "world data" that is less detailed than individual levels and gets applied to specific levels when loading them
	* consider multithreading to load/update levels before the player gets to them
	* could simply update the entire world as necessary when saving the game

-fix the issue where it's impossible  to get out of the controller controls menu when selecting a control using only a keyboard (and vice versa)
	*idea: cancel button from one input source gets out of "taking input" on the other input source's controls menu
	*other idea: only allow selection in each menu through the appropriate selection button (I like this idea better since it's more intuitive)

-need to make a "restore defaults" (or something similar) button for video configurations

-make mallet able to break rocks, add swinging animation and animations for rocks being hit/destroyed

-make it so the game can detect when a controller is plugged in and update properly
	*look at main, where the event queue registers the source 
		(might need some check accessed through the main loop)
	*might need to do this for mouse too, need to test

-fix analog stick issue that sometimes happens when controller is in some weird configuration

-fix the weird effects that happen when pausing and resuming rapidly while moving the control stick around
	*make sure this fix applies to both inventory and pause

-make entityAttributes more flexible by allowing values other than ints

-once saving/loading is implemented, make sure we have a way to track things that actually need to be saved/loaded
	*i.e., don't bother saving a level if nothing about it has changed

-make custom mouse cursor

-make effects for the player touching vegetation
	*might consider a small "rustling vegetation" animation that covers the player's feet instead 
		#this could be used for wading through shallow water

-figure out how trails are going to work with the current tile system
	*could have them occupy existing tiles as some sort of "contents" and have trail images drawn over them and increase movement modifier

-fix the screen modes (fullscreen and windowed fullscreen seem to be mixed up)

-figure out how to scale object/ui sizes with resolution

-fix the glitch where parts of the player's face sometimes disappear

-idea: consider including animation frame duration in the files from which we load gameimages 
	*may also want to adjust frame duration ingame in some situations such as when tilting the joystick very lightly with a controller

-make the leaves as a separate sprite and having them turn partly transparent when the player passes behind them.
	*could also try doing this for the entire trees, since we might have very large trees that obscure the player
	*first, make sure the leaves have their mask loaded by images. (do this in level when they are created)
	*since entitygroups are treated as single entities, need some kind of entitygroup overridden entity collision method for when the player rect-collides witth trees.
		#within this method, have each entity within the group attempt to mask-collide with the other entity (i.e. the player) and check for the transparent_on_contact attribute

-test large levels to see if there is lag when entering them

-decide how to handle player leaving the level when there's no corresponding level

LONG TERM PLANS

-allow changing text speed in options

-make a "calendar" UI that also fuctions as saving/loading
	*eventually want to make reloading from older saves something we subtly nudge the player towards in order to unlock hidden endings
	*also need to make it so certain things only happen if the player is in the right places at the right times

-make an "encyclopedia"-like feature that allows the player to keep track of animals seen, bugs caught, rare items found, plants found, etc.
	*might even use real information about some of these things (like latin name)

-make harvestable plants that grow over time
	*consider implementing a "cooking" system

-add animals

-audio
	* dialog sounds