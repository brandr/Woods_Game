Woods game todolist

---------------------------------------------------
Code Prioritization
---------------------------------------------------

Last updated 8/18/2019

totals don't include ongoing stuff 

Total: 99-148 days (~4-5 months, done by Mar 2020)

1. Finish NPC pathing/AIState stuff
	(4-8 days)
2. Quest/NPC triggers
	(5-10 days)
3. NPC dialog calculation
	(5-10 days)
4. NPC schedule
	(3-6 days)
5. Cutscenes
	(15-20 days)
6. Loading screens/progress bars
	(3-5 days)

(clean up todos and try to think of what's missing here)	

7. Animals/bugs
	(10-15 days)
8. Animation/image code stuff
	(10-15 days)
9. Menu/control stuff
	(10-15 days)
10. Inventory/item stuff (shovel?)
	(5-10 days)
11. Encyclopedia
	(10-15 days)
12. Map
	(5-10 days)

(clean up todos and try to think of what's missing here)	

13. Figure out how to force end of day (otherwise saving gets weird after midnight)
	(2-5 days)
14. Wake-up time (alarm clock?)
	(2-5 days)
15. Stamina/resource management
	(5-10 days)
16. Audio
	(10-15 days)
17. Level Editor improvements
	(???)
18. Content!
	(???)

Ongoing tasks:

1. improve memory usage/performance
2. fix bugs
3. streamline level editor
4. come up with more content

---------------------------------------------------
NPCs
---------------------------------------------------

NPC pathing
	- there is still slowdown (in some cases)
		* check comments in tile pathing
		* need repro steps because it doesn't happen every time
		* might be affected by checking nearby blocks too often-- could refactor these into buckets
	- Test NPCs walking directly towards each other
		* do they push each other?
	- Set a debug launch argument to control whether test rect bitmaps appear
		* Manage the bitmaps through ImageLoader
		* instead of launch argument, could add console commands

AIState/NPC schedule
	- extend schedule logic to "go to place and do an animation" or 
		 "go to place and wander around" in addition to standing on specific tiles at specific times
		* best way to figure out what things I need is probably with example schedules that are realstic for the actual game
	- now that pathing factors in tile cost, we can get a rough estimate of how long it'll take to reach the scheduled destination.
		# this is useful for questions like "how soon do I need to leave to arrive on time?" and "am I already too late to reach the event?"
		# note that this is only a rough estimate since we might get blocked on the way. This means it's the soonest possible arrival time
	- IDEA: could serialize AIState rules somewhere ("personality types?")
	- use schedule logic to determine NPC spawn locations
		* not necessary if NPCs all sleep at least as late as the latest that the player wakes up, or if there are only a small number of possible wake-up times
		* might become necessary if the world is so big we have to split out dungeons and calculate NPC locations when player enters an area

Add NPC quest triggers
	- these give conditions which feed schedule blocks
	- could make the first quest getting some item from the store with money from the player's mom
		* can also just choose to keep the money
	- these quest triggers need to tie into time travel (think of majora's mask)
	- definitely want to think of several examples and notepad out before starting to implement these
	- incorporate into schedule logic

Make NPC dialog 
	- similar to stardew valley where NPCs will randomly choose something to say based on the conditions
	- implement this as a set of "npc dialogs" tied to a set of Conditions (already implemented for schedule)
	- if necessary, attach some conditions to boolean methods through reflection
	- for instance, have a character choose from a set of 3 options when it's raining, 
		2 other options when the player is holding a certain tool, etc
	- weight some options to be more likely than others using integer values
	- when the player talks to an npc, determine all dialog options that are appropriate and randomly choose one
		* should this random chance be weighted?
	- one condition might be "does the player have this item"

Experiment with some basic cutscenes
	- could have one with Renaldo preaching about the neighorhood watch as a test

Dialog portrait image

---------------------------------------------------
Memory management/error handling
---------------------------------------------------

Fix performance issues
	* look into the font for the FPS counter since it's created right at the beginning
		# also font for title screen? (might need to destroy)

When debugging performance, check for al_create_bitmap and al_load_font references to make sure we aren't using memory bitmaps after startup

Asynchronous loading screen
	* https://www.allegro.cc/forums/thread/615021
	* https://wiki.allegro.cc/index.php?title=Allegro_5_Tutorial/Threads
	* add a progress bar (remember to use mutex)
		# how to quantity loading progress? (could split into levels)
	* If necessary, could make it so we asynchronously load only adjacent levels to the current one
		# need to be careful to ensure the player can't walk to the edge before we finish loading
		# in the cave game this applied only to dungeons, so could implement travel between dungeons and make it work like that
		# would probably want to figure out how I'm actually going to use dungeons

Use the heap profiler whenever debugging memory usage because it's extremely helpful

Watch out for a leak in NPC.choose_dialog()

Consider getting rid of some serializable tile attributes, like position (we can get this by their index in the tilerow)
	* remember to re-save levels in the editor after making this change or any others like it
	* this same strategy could apply to a lot of serializable objects
	* in addition to serializable values, we can probably get rid of others as well

One possible problem might be in Tile.replace_block(). At some point, we create new interactActions, contactActions, etc., so make sure the old ones are getting properly deleted.
	* can probably store these actions more globally (or do we already do this?)

Fix build warnings

If the tree bitmaps are ever a problem, could refactor image storage so we break large bitmaps into 64x64 subsections

---------------------------------------------------
Level editor
---------------------------------------------------

Fix bug where XML attributes can get saved twice after editing via ctrl-click

Add specific editor components for things like path nodes, tiles, etc and reduce how much has to be entered directly as xml

What to use tileset tab for?
	* ideally could add new object types, edit global values, etc

Tiled Images
	* no room to put it on tileset tab-- need to reorganize it
		# first, firue out what I actually want to use that tab for (currently only used to select tileset)

---------------------------------------------------
Procedural generation
---------------------------------------------------

IDEA: When procedurally generating woods, allow a few days to pass so plant growth happens "naturally" and we start with some baby plants

IDEA: can make level gen even more random by randomizing some destination path nodes within a network of levels

Check NPC pathing when generating and in new day update

---------------------------------------------------
Bug fixes
---------------------------------------------------

There's sometimes an exception on closing the window
	* seems to have something to do with randomized procedural generation, because it only happens some of the time
	* exception has something to do with level's tile rows -- happens in Level.unload_content()

Exception when going to a level that doesn't exist

---------------------------------------------------
Art/content
---------------------------------------------------

Draw Aleepee and Renaldo

Draw the leaves for the large tree sprite
	* if it's hard to see the player when walking behind trees, make the "transparent on contact" attribute actually work

Draw the symbols for the Eye of Pan and the Eye of Gabriel
	* could also do "hand" instead of "eye" but I like eye better currently

---------------------------------------------------
Physics
---------------------------------------------------

Consider changing thorn behavior
	* Instead of just bouncing away, you get stuck and have to "shake" free (which uses a lot of stamina) or cut the thorns

Consider giving blocks optional masks
	* this means we use the block's image if there's no mask filepath

---------------------------------------------------
Animation/image code
---------------------------------------------------

IDEA: different walk animations for different speed ranges (1.0 - 2.0, 2.0 - 3.0, etc)
	* do this at the same time as making "rustle" animation because that animation might need to sync up with player's feet
	* could also adjust frame duration based on speed up to a certain point
	* test this with controller since this gives the most fine-grain speed control

Make some more "brush" tile types that are much slower than grass so there's more of a point to staying on the trail
	* give them "rustling" sprites/animation that correspond to the player walking through them so it covers the player's feet and doesn't just look flat
		# this could be used for wading through shallow water
	* later, consider allowing trails to be carved through these (should be slow/tedious/stamina intensive so the player can't just make trails all day on day 1)

IDEA: could give trees shadows -- these would be similar to night/day filters and would have spritesheets like entitygroup masks

Buildings
	* need door animation? (no other blocks are animated, might need to be a new thing)
	* stairs? (good test of building mechanics, similar to going outside)
		# could also make stairs an entitygroup and use an optical illusion to make it look like you're walking "up" it
	* can use tiledImages and invisible blocks to make furniture, sink, etc
	* make roofs

Figure out how to scale object/ui sizes with resolution
	* might not be feasible

Make custom mouse cursor
	* at this point probably go through UI/controls and add mouse controls where appropriate

---------------------------------------------------
Animals
---------------------------------------------------

Add animals
	* might be a good time to start on encyclopedia
	* keep track of which animals live in the area and let them move between levels, like NPCs
	* new animals appear over time, probably don't need to have animals breed because the new ones will just show up from the player's perspective
	* maybe some animal types are set to only appear n days into the game
	* add bugs too (possibly first, they might be easier and make more sense to interact with)
		# some bugs might be under rocks
	* Animals might not travel between levels, and will be generated from templates, 
		rather than than 1 to 1 serialized data <-> game object relationship

---------------------------------------------------
Map
---------------------------------------------------

Since the game is largely about exploration, the map should start out blank and get filled in by exploring.

Could be like metroid and have borders around levels but not the 1x1 squares that make up levels

Could generate these images on level gen by getting full-sized images in the same way we draw the level for the editor, then scaling them down to a few pixels
	* definitely want to delete these images afterwards because they'll take up a lot of space otherwise

---------------------------------------------------
Inventory/items
---------------------------------------------------

Implement ways to add items to the inventory, possibly store them in a chest or something

Implement "pickup-able" items, like seeds from ferns
	* Should probably be a % drop chance rolled on breaking plant so player can't savescum
	* probably need to make general "plant" behavior (growing, spreading, etc.) as part of this
	* Make sure these disappear properly from level-- do not store them in xml collections as there is no need

Allow harvesting plants
	* consider implementing a "cooking" system

Make mallet able to break rocks, add swinging animation and animations for rocks being hit/destroyed
	* first make sure I actually want the mallet in the game (balance)

Add a shovel and allow the player to dig up items
	* implement picking up items off the ground first

---------------------------------------------------
Day/night cycle
---------------------------------------------------

Day/night cycle
	- might want to use different filtering techniques depending on indoors/outdoors, in shaded/non shaded areas, etc.
		* how to handle areas with their own lighting like lamps?
	- What happens in terms of date/saving if the player stays up past midnight? (with the current system, that means the date is never late)
		* Should player pass out, get a game over, etc if they're up too late?
	- calculate "time to wake up" somehow rather than just making it constant
		* alarm clock upgrade/item?

---------------------------------------------------
Stamina
---------------------------------------------------
	
IDEA: Stamina could drain slowly when walking and faster when running since time and stamina are both limited resources
	* running should be significantly less stamina-efficient 
		-- it shouldn't only drain faster, you should lose more stamina per unit traveled than when walking
	* need to add a run button, also consider how this works with analog stick (need smooth stamina formula)

IDEA: Stamina upgrades could be the only thing you take with you when reloading

Contact with thorns should cost stamina (look for a "damage" attribute that I already made)

---------------------------------------------------
Menus
---------------------------------------------------

Fix the way we load game from title screen-- need to select a specific day (and should probably display the current day in menu)
	* save current day in global xml that exists outside the day folders?

Need to make a "restore defaults" (or something similar) button for video configurations

Allow changing text speed in options

---------------------------------------------------
Controls
---------------------------------------------------

Make it so the game can detect when a controller is plugged in and update properly
	*look at main, where the event queue registers the source 
		(might need some check accessed through the main loop)
	*might need to do this for mouse too, need to test

---------------------------------------------------
Encyclopedia
---------------------------------------------------

Make an "encyclopedia"-like feature that allows the player to keep track of animals seen, bugs caught, rare items found, plants found, etc.
	* might even use real information about some of these things (like latin name)

---------------------------------------------------
Audio
---------------------------------------------------

Add music
	* The Eye of Pan has a special theme that is hidden inside other tracks

Dialog sounds (like in animal crossing)