Woods game todolist

---------------------------------------------------
Code Prioritization
---------------------------------------------------

Last updated 10/12/2019

Target date for main code to be done: ~ Mar 2020
Target date for all code/assets/levels to be done: ~ Aug 2020

Total: 67-95 days (~2-3 months)

1. Inventory/item/money stuff
	(15-20 days)
2. Encyclopedia/journal
	(10-15 days)
3. Animals/bugs
	(10-15 days)
4. Dialog/schedule
	(5-10 days)

(should get here around December 2019) 
(clean up todos and try to think of what's missing here)

5. Audio
	(5-10 days)
6. Animation/image code stuff
	(10-15 days)
7. Menu/control stuff
	(5-10 days)

(should get here around January 2020) 
(clean up todos and try to think of what's missing here)	

8. Loading screens/progress bars
	(3-5 days)
9. Figure out how to force end of day (otherwise saving gets weird after midnight)
	(2-5 days)
10. Wake-up time (alarm clock?)
	(2-5 days)
11. Stamina/resource management
	(5-10 days)

(should get here around Feburary 2020) 
(clean up todos and try to think of what's missing here)	

12. Miscellaneous code stuff (break out into specific todos after getting here)
	(???)
13. Level Editor improvements
	(???)
14. Content!
	(???)

Ongoing tasks:

1. improve memory usage/performance
2. fix bugs
3. streamline level editor
4. come up with more content

---------------------------------------------------
Encyclopedia/Journal
---------------------------------------------------

Allow dialogs to activate trigger statuses/quests (just need to serialize the trigger status/quest-related struct in that part of the dialog I think) 
	and/or allow trigger statuses or other serialized structs to "begin" quests by taking a quest key and a quest page index.
	- The latter is probably the easiest way to advance quests

Make an "encyclopedia"-like feature that allows the player to keep track of animals seen, bugs caught, rare items found, plants found, etc.
	* might even use real information about some of these things (like latin name)

Journal stores quests

---------------------------------------------------
Inventory/items
---------------------------------------------------

Implement ways to add/remove items (and money) to the inventory
	* example: receive from/give to NPC

Allow storing items in a chest

Some items should not be possible to drop, only to store (i.e. tools, though tools don't travel back in time)

Implement "pickup-able" items, like seeds from ferns
	* should probably be rare, and shouldn't need a lot of them
	* Should probably be a % drop chance rolled on breaking plant so player can't savescum
	* Make sure these disappear properly from level when they should (maybe on a timer or after leaving level?)

Consider implementing a "cooking" system

Make mallet able to break rocks, add swinging animation and animations for rocks being hit/destroyed
	* first make sure I actually want the mallet in the game (balance)

Add a shovel and allow the player to dig up items
	* implement picking up items off the ground first

---------------------------------------------------
Animals
---------------------------------------------------

Add animals
	* might be a good time to start on encyclopedia
	* keep track of which animals live in the area and let them move between levels, like NPCs
	* new animals appear over time, probably don't need to have animals breed because the new ones will just show up from the player's perspective
	* maybe some animal types are set to only appear n days into the game
	* add bugs too (possibly first, they might be easier and make more sense to interact with)
		# some bugs might be under rocks
	* Animals might not travel between levels, and will be generated from templates, 
		rather than than 1 to 1 serialized data <-> game object relationship

---------------------------------------------------
Audio
---------------------------------------------------

Full documentation of allegro audio: https://www.allegro.cc/manual/5/audio.html

Different sound filenames for different footstep sound effects
	* key by NPC + tile type (but not one-to-one, so NPCs can share some footstep sounds if they should sound exactly the same)

In addition to tiles influencing footstep sounds, probably want sounds from ferns, swinging shears (and using items in general), etc

Dialog sounds (like in animal crossing)

What kinds of things can cause music to start/stop/fade/add cues?
	* probably shouldn't just be tied to level, but could have an override that causes the music to fade out and be replaced by specific tracks for some levels
	* do we want a MusicManager or some other structure in AudioManager that handles this?

Would probably work better to base footstep sfx cycles on the animation speed of the walking animation, since this is a more reliable way to get num footsteps
	* probably almost always safe to assume that a footstep is half of the frame duration of the animation
	* this will work well with changing frame durations with walk speed (probably want to do this first)

Replace all placeholder footstep sound files

Find a good composing program and make music
	* The Eye of Pan has a special theme that is hidden inside other tracks

---------------------------------------------------
NPCs
---------------------------------------------------

Dialog 
	- schedule should feed dialog (say different things depending on what NPC is doing)
		* not a direct connection, but some flag set by schedule, which feeds dialog qualifiers
		* pretty sure Qualifier methods need to be refactored to take the NPC as an argument for this to work 
			(unless it can be handled purely through triggers, or we can get the npc via world)
	- might need to add action keys for dialogs (not just dialog options)
		* think about whether this is actually necessary before implementing
	- may need serializable DialogItem/DialogGroup/DialogItemOption/etc action bindings at some point
		* see Dialog.action_bindings-- we would pass the serialized bindings here
	- portrait image
	- should you be unable to talk to the same NPC too many times a day like in stardew?
		* probably need a lot more actual gameplay to answer this question

AIState/NPC schedule
	- extend schedule logic to "go to place and do an animation" or 
		 "go to place and wander around" in addition to standing on specific tiles at specific times
		* best way to figure out what things I need is probably with example schedules that are realstic for the actual game
	- now that pathing factors in tile cost, we can get a rough estimate of how long it'll take to reach the scheduled destination.
		* this is useful for questions like "how soon do I need to leave to arrive on time?" and "am I already too late to reach the event?"
		* note that this is only a rough estimate since we might get blocked on the way. This means it's the soonest possible arrival time
	- use schedule logic to determine NPC spawn locations
		* not necessary if NPCs all sleep at least as late as the latest that the player wakes up, or if there are only a small number of possible wake-up times
		* might become necessary if the world is so big we have to split out dungeons and calculate NPC locations when player enters an area
	- maybe have some npcs alter schedule if the player spots them in certain situations, so you have to be stealthy
		* how to communicate stealth mechanics to the player?
		* would also cancel pathing
		* could have a vision radius that adjusts gradually based on time of day/light level

Should NPC's relationship with player and other NPCs be modeled/ serialized?
	- only necessary if it can't be represented efficiently using triggers

NPC pathing
	- why does NPC 1 sometimes walk against the wall upon starting a new day?
		* I think I fixed this, so delete this todo if I don't see it anymore
		* can probably repro by going to sleep at a specific time (I think reset on new day doesn't fix state properly
	- I saw a case where NPC 2 "wiggled" after reaching a primary node, need to figure out how this happened and fix
	- can end up on top of an npc and get temporarily stuck if you go into a building right as they're at the exit
		* probably want to fix by having you appear just past them
	- there is still slowdown (in some cases)
		* check comments in tile pathing
	- Set a debug launch argument to control whether test rect bitmaps appear
		* Manage the bitmaps through ImageLoader
		* instead of launch argument, could add console commands (this applies to FPS display too)

---------------------------------------------------
Memory management/error handling
---------------------------------------------------

As of the audio update, performance is much worse on large levels-- what could be causing this?
	* not drawing entity groups fixes this
		# they might have some associated images that aren't getting converted into video bitmaps
		# maybe we need to break down their images into subsections

Document how to format serialized things like dialog trees so I don't forget
	* take this into account when improving level editor

Test large world with lots of NPCs so I know ahead of time if I need to fix performance issues

Fix performance issues
	* look into the font for the FPS counter since it's created right at the beginning
		# also font for title screen? (might need to destroy)

When debugging performance, check for al_create_bitmap and al_load_font references to make sure we aren't using memory bitmaps after startup

Asynchronous loading screen
	* https://www.allegro.cc/forums/thread/615021
	* https://wiki.allegro.cc/index.php?title=Allegro_5_Tutorial/Threads
	* add a progress bar (remember to use mutex)
		# how to quantity loading progress? (could split into levels)

If necessary, could make it so we asynchronously load only adjacent levels to the current one
	* need to be careful to ensure the player can't walk to the edge before we finish loading
	* in the cave game this applied only to dungeons, so could implement travel between dungeons and make it work like that

Consider getting rid of some serializable tile attributes, like position (we can get this by their index in the tilerow)
	* remember to re-save levels in the editor after making this change or any others like it
	* this same strategy could apply to a lot of serializable objects
	* in addition to serializable values, we can probably get rid of others as well

One possible problem might be in Tile.replace_block(). At some point, we create new interactActions, contactActions, etc., so make sure the old ones are getting properly deleted.
	* can probably store these actions more globally (or do we already do this?)

Fix build warnings

If the tree bitmaps are ever a problem, could refactor image storage so we break large bitmaps into 64x64 subsections

---------------------------------------------------
Level editor
---------------------------------------------------

Fix bug where XML attributes can get saved twice after editing via ctrl-click

Add specific editor components for things like path nodes, tiles, etc and reduce how much has to be entered directly as xml

What to use tileset tab for?
	* ideally could add new object types, edit global values, etc

Tiled Images
	* no room to put it on tileset tab-- need to reorganize it
		# first, firue out what I actually want to use that tab for (currently only used to select tileset)


---------------------------------------------------
Cutscenes
---------------------------------------------------

Ways cutscenes can start (try to combine into as few as possible from a code perspective)
	- Talk to an NPC (they should probably have to be in a specific location-- ie on a specific part of their schedule)
		# probably don't want it to be guaranteed, so tie it to a specific node in the dialog tree 
		(though this can be the start if the cutscene should start right away)
	- Waking up on a specific day (possibly do this on day 1)
	- Time going past midnight

Cutscene with Renaldo preaching about the neighorhood watch
	- this is important as a more ambitious test of cutscenes-- if this can be done cleanly, it means cutscene code is sufficient

---------------------------------------------------
Procedural generation
---------------------------------------------------

IDEA: When procedurally generating woods, allow a few days to pass so plant growth happens "naturally" and we start with some baby plants

IDEA: can make level gen even more random by randomizing some destination path nodes within a network of levels

Check NPC pathing when generating and in new day update (in former case, keep re-generating until it's pathable)

How to place special objects/arrangements of objects that won't always be in the same spot?
	* example: crashed car

---------------------------------------------------
Bug fixes
---------------------------------------------------

There's sometimes an exception on closing the window
	* seems to have something to do with randomized procedural generation, because it only happens some of the time
	* exception has something to do with level's tile rows -- happens in Level.unload_content()

Exception when going to a level that doesn't exist

---------------------------------------------------
Art/content
---------------------------------------------------

Draw Aleepee and Renaldo

Draw the leaves for the large tree sprite
	* if it's hard to see the player when walking behind trees, make the "transparent on contact" attribute actually work

Draw the symbols for the Eye of Pan and the Eye of Gabriel
	* could also do "hand" instead of "eye" but I like eye better currently

---------------------------------------------------
Physics
---------------------------------------------------

Consider changing thorn behavior
	* Instead of just bouncing away, you get stuck and have to "shake" free (which uses a lot of stamina) or cut the thorns

Consider giving blocks optional masks
	* "optional" means we use the block's image if there's no mask filepath

---------------------------------------------------
Animation/image code
---------------------------------------------------

IDEA: different walk animations for different speed ranges (1.0 - 2.0, 2.0 - 3.0, etc)
	* do this at the same time as making "rustle" animation because that animation might need to sync up with player's feet
	* could also adjust frame duration based on speed up to a certain point
	* test this with controller since this gives the most fine-grain speed control

Make some more "brush" tile types that are much slower than grass so there's more of a point to staying on the trail
	* give them "rustling" sprites/animation that correspond to the player walking through them so it covers the player's feet and doesn't just look flat
		# this could be used for wading through shallow water
	* later, consider allowing trails to be carved through these (should be slow/tedious/stamina intensive so the player can't just make trails all day on day 1)

IDEA: could give trees shadows -- these would be similar to night/day filters and would have spritesheets like entitygroup masks

Buildings
	* need door animation? (no other blocks are animated, might need to be a new thing)
	* stairs? (good test of building mechanics, similar to going outside)
		# could also make stairs an entitygroup and use an optical illusion to make it look like you're walking "up" it
	* can use tiledImages and invisible blocks to make furniture, sink, etc
	* make roofs

Figure out how to scale object/ui sizes with resolution
	* might not be worth the effort

Make custom mouse cursor
	* at this point probably go through UI/controls and add mouse controls where appropriate

---------------------------------------------------
Day/night cycle
---------------------------------------------------

Day/night cycle
	- might want to use different filtering techniques depending on indoors/outdoors, in shaded/non shaded areas, etc.
		* how to handle areas with their own lighting like lamps?
	- What happens in terms of date/saving if the player stays up past midnight? (with the current system, that means the date is never late)
		* Should player pass out, get a game over, etc if they're up too late?
	- calculate "time to wake up" somehow rather than just making it constant
		* alarm clock upgrade/item?

---------------------------------------------------
Map
---------------------------------------------------

Possibly allow scrolling depending on how big the world should be
	* might be cleaner to just adjust scale/frame size to match up -- decide once the general size of the world is decided

In some cases, may want level generation to spawn location markers (special objects/places that can be in different places)

---------------------------------------------------
Stamina
---------------------------------------------------
	
IDEA: Stamina could drain slowly when walking and faster when running since time and stamina are both limited resources
	* running should be significantly less stamina-efficient 
		-- it shouldn't only drain faster, you should lose more stamina per unit traveled than when walking
	* need to add a run button, also consider how this works with analog stick (need smooth stamina formula)

IDEA: Stamina upgrades could be the only thing you take with you when reloading

Contact with thorns should cost stamina (look for a "damage" attribute that I already made)

---------------------------------------------------
Menus
---------------------------------------------------

Fix the way we load game from title screen-- need to select a specific day (and should probably display the current day in menu)
	* save current day in global xml that exists outside the day folders?

Need to make a "restore defaults" (or something similar) button for video configurations

Allow changing text speed in options

On inventory screen, change tabs by clicking on them (maybe arrow-selected up to them too)

Nicer looking menus

---------------------------------------------------
Controls
---------------------------------------------------

Mouse/keyboard should take much more advantage of the mouse than it currently does (maybe WASD instead of arrow keys, click replaces most interact actions, etc.)

Make it so the game can detect when a controller is plugged in and update properly
	*look at main, where the event queue registers the source 
		(might need some check accessed through the main loop)
	*might need to do this for mouse too, need to test

---------------------------------------------------
Long term
---------------------------------------------------

Hire a sprite artist

Compose music

Look up how to get on steam ahead of time

When balancing money, adjust for inflation for 1987